Step 1: Add Maven Dependencies in pom.xml
<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- Spring Boot Starter Data MongoDB -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-mongodb</artifactId>
    </dependency>
    <!-- Thymeleaf for rendering HTML pages -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    <!-- Spring Boot Devtools for hot reloading -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <scope>runtime</scope>
    </dependency>
    <!-- Lombok (Optional for reducing boilerplate code) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>
</dependencies>


Step 2: Create the Employee Model
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
@Document(collection = "employees")
public class Employee {
    
    @Id
    private String id;
    private String employeeName;
    private String employeeEmail;
    private String location;

    public String getId() 
    {
        return id;
    }
    public void setId(String id) 
    {
        this.id = id;
    }
    public String getEmployeeName() 
    {
        return employeeName;
    }
    public void setEmployeeName(String employeeName) 
    {
        this.employeeName = employeeName;
    }
    public String getEmployeeEmail() 
    {
        return employeeEmail;
    }
    public void setEmployeeEmail(String employeeEmail) 
    {
        this.employeeEmail = employeeEmail;
    }
    public String getLocation() 
    {
        return location;
    }
    public void setLocation(String location) 
    {
        this.location = location;
    }
}


Step 3: Create the MongoDB Repository
import org.springframework.data.mongodb.repository.MongoRepository;
public interface EmployeeRepository extends MongoRepository<Employee, String> 
{
}


Step 4: Create the Service Layer
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class EmployeeService 
{
    @Autowired
    private EmployeeRepository employeeRepository;
    public Employee saveEmployee(Employee employee) 
    {
        return employeeRepository.save(employee);
    }
    public List<Employee> getAllEmployees() 
    {
        return employeeRepository.findAll();
    }
    public Employee getEmployeeById(String id) 
    {
        return employeeRepository.findById(id).orElse(null);
    }
}


Step 5: Create the Controller
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;
@Controller
public class EmployeeController
{
    @Autowired
    private EmployeeService employeeService;
    @GetMapping("/")
    public String indexPage(Model model)
    {
        model.addAttribute("employee", new Employee());
        return "index";
    }
    @PostMapping("/saveEmployee")
    public String saveEmployee(@ModelAttribute("employee") Employee employee) 
    {
        employeeService.saveEmployee(employee);
        return "redirect:/displayAll";
    }
    @GetMapping("/displayAll")
    public String displayAll(Model model) {
        List<Employee> employees = employeeService.getAllEmployees();
        model.addAttribute("employees", employees);
        return "employeeList";
    }
    @GetMapping("/display/{id}")
    @ResponseBody
    public Employee displayById(@PathVariable("id") String id) {
        return employeeService.getEmployeeById(id);
    }
}


Step 6: Create the HTML Form (index.html)
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Employee Form</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h2>Enter Employee Details</h2>
        <form action="/saveEmployee" method="post">
            <div class="form-group">
                <label for="employeeName">Employee Name:</label>
                <input type="text" class="form-control" id="employeeName" name="employeeName" required>
            </div>
            <div class="form-group">
                <label for="employeeEmail">Employee Email:</label>
                <input type="email" class="form-control" id="employeeEmail" name="employeeEmail" required>
            </div>
            <div class="form-group">
                <label for="location">Location:</label>
                <input type="text" class="form-control" id="location" name="location" required>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>
</body>
</html>


Step 7: Create the Employee List Page (employeeList.html)
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Employee List</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h2>Employee List</h2>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Employee ID</th>
                    <th>Employee Name</th>
                    <th>Employee Email</th>
                    <th>Location</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="employee : ${employees}">
                    <td th:text="${employee.id}"></td>
                    <td th:text="${employee.employeeName}"></td>
                    <td th:text="${employee.employeeEmail}"></td>
                    <td th:text="${employee.location}"></td>
                </tr>
            </tbody>
        </table>
    </div>
</body>
</html>


Step 8: Application Configuration for MongoDB
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=employee_db
